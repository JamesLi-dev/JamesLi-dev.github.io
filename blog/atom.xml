<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://JamesLi-dev.github.io/blog</id>
    <title>这里是 Torli's  Blog</title>
    <updated>2023-04-05T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://JamesLi-dev.github.io/blog"/>
    <subtitle>这里是 Torli's  Blog</subtitle>
    <icon>https://JamesLi-dev.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[全栈！需要哪些知识？]]></title>
        <id>https://JamesLi-dev.github.io/blog/2023/04/05/blog</id>
        <link href="https://JamesLi-dev.github.io/blog/2023/04/05/blog"/>
        <updated>2023-04-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[在当下国内大环境不景气的时候，怎么走出自己的路，肯定会有人说，我特别精通 React 或者 Vue，这个肯定是一个优点，但是在前端领域，需要学习的技能是很多的，再加上近些年各种造轮子，是的现在市面上技术点越来越多，例如：]]></summary>
        <content type="html"><![CDATA[<p>在当下国内大环境不景气的时候，怎么走出自己的路，肯定会有人说，我特别精通 React 或者 Vue，这个肯定是一个优点，但是在前端领域，需要学习的技能是很多的，再加上近些年各种造轮子，是的现在市面上技术点越来越多，例如：</p><ul><li>框架有 React，vue，Angular, Solid，Ember, Svelte, pReact 等等</li><li>状态管理 Redux, MobX, Vuex, pinia, Jotai, Zustand, Recoil 等等</li><li>UI 框架 Antd, Element UI 等等</li><li>CSS 有 Less，Sass, css in Js, Tailwind css, Unocss 等等</li><li>跨端 Uniapp, Taro</li><li>桌面端 Electron, Tauri</li><li>打包 webpacck, vite, Turbopack, Rspack 等等</li><li>微信小程序</li><li>React Native</li><li>等等诸多技术，简直卷出了天际。。。</li></ul><h1>什么是全栈？</h1><p>上面罗列的基本都是前端技术相关的东西，全栈顾名思义就是要【全部照顾】，前端后端都做，也就是客户端，服务端都做。</p><p>栈 本来就是技术的集合，包括了很多需要掌握，使用的技术，框架，工具，还有软件，数据。</p><p>后端在 JS 中，最常用的应该就是 Nodejs，常用的 node 框架也有很多，express，koa，nest 等等，偶然中还看到过一个词 MEAN，代表 MongoDB、Express、React、Node。可以说是比较流行的 JS 栈了。</p><p>后端一般都会涉及到数据库，那常用的数据库有 MongoDB，MySQL，PostgreSQL 等等，分别代表的 关系型数据库和非关系型数据库。</p><p>作为全栈工程师，那必须要知道怎么去从头到尾构建一个 web 应用，包括前端后端所有基础设施。</p><h1>职责</h1><p>全栈工程师的职责，通俗点讲就是 『全干』。当然还得取决于公司技术团队的结构和人数</p><p>一般职责包括：</p><ul><li>客户沟通，需求沟通，整理需求，充当 PM 角色</li><li>和 UI 沟通设计相关的 UI 设计稿</li><li>前端工作，这里就不展开描述了<ul><li>...</li></ul></li><li>服务端工作、数据库工作<ul><li>数据库设计</li><li>API 文档</li><li>确保接口的稳定性</li><li>良好的可扩展性</li><li>...</li></ul></li><li>测试，必要时编写测试用例，接口测试等</li><li>开发文档编写</li><li>使用说明编写等</li></ul><h1>怎么学习全栈工程师所学技能</h1><p>下面就讲一下 全栈工程师技能的学习路线</p><h2 class="anchor anchorWithHideOnScrollNavbar_biKL" id="网络浏览器安全">网络，浏览器，安全<a href="#网络浏览器安全" class="hash-link" aria-label="网络，浏览器，安全的直接链接" title="网络，浏览器，安全的直接链接">​</a></h2><p>作为一名程序员，网络，浏览器，安全是必备的知识点</p><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="看这里"><a href="/docs/category/基础">看这里</a><a href="#看这里" class="hash-link" aria-label="看这里的直接链接" title="看这里的直接链接">​</a></h3><p>当然可以！以下是一份详细的前端关于网络、浏览器和安全的知识点总结：</p><h2 class="anchor anchorWithHideOnScrollNavbar_biKL" id="网络">网络<a href="#网络" class="hash-link" aria-label="网络的直接链接" title="网络的直接链接">​</a></h2><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="http">HTTP<a href="#http" class="hash-link" aria-label="HTTP的直接链接" title="HTTP的直接链接">​</a></h3><ul><li>HTTP（超文本传输协议）是一种用于在 Web 上传输数据的协议。</li><li>HTTP 是一种无状态协议，每个请求和响应都是独立的。</li><li>HTTP 请求由请求行、请求头和请求体组成。</li><li>HTTP 响应由状态行、响应头和响应体组成。</li><li>HTTP 方法包括 GET、POST、PUT、DELETE、HEAD、OPTIONS 等。</li><li>HTTP 状态码包括 1xx（信息）、2xx（成功）、3xx（重定向）、4xx（客户端错误）和 5xx（服务器错误）。</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="https">HTTPS<a href="#https" class="hash-link" aria-label="HTTPS的直接链接" title="HTTPS的直接链接">​</a></h3><ul><li>HTTPS（安全 HTTP）是一种通过 SSL/TLS 加密的 HTTP 协议。</li><li>HTTPS 使用公钥加密和私钥解密的方式保证通信的安全性。</li><li>HTTPS 使用数字证书验证服务器的身份。</li><li>HTTPS 的默认端口是 443。</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="dns">DNS<a href="#dns" class="hash-link" aria-label="DNS的直接链接" title="DNS的直接链接">​</a></h3><ul><li>DNS（域名系统）是一种将域名转换为 IP 地址的系统。</li><li>DNS 使用层次结构的域名空间，每个域名都有一个唯一的 IP 地址。</li><li>DNS 解析过程包括递归查询和迭代查询。</li><li>DNS 缓存可以减少 DNS 查询的次数。</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="tcp">TCP<a href="#tcp" class="hash-link" aria-label="TCP的直接链接" title="TCP的直接链接">​</a></h3><ul><li>TCP（传输控制协议）是一种面向连接的协议，用于在网络上可靠地传输数据。</li><li>TCP 使用三次握手建立连接，四次挥手关闭连接。</li><li>TCP 使用滑动窗口和拥塞控制算法来控制数据传输的速度和可靠性。</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="websocket">WebSocket<a href="#websocket" class="hash-link" aria-label="WebSocket的直接链接" title="WebSocket的直接链接">​</a></h3><ul><li>WebSocket 是一种在 Web 上实现双向通信的协议。</li><li>WebSocket 使用 HTTP 协议建立连接，然后升级到 WebSocket 协议。</li><li>WebSocket 可以在客户端和服务器之间实时地传输数据。</li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_biKL" id="浏览器">浏览器<a href="#浏览器" class="hash-link" aria-label="浏览器的直接链接" title="浏览器的直接链接">​</a></h2><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="渲染引擎">渲染引擎<a href="#渲染引擎" class="hash-link" aria-label="渲染引擎的直接链接" title="渲染引擎的直接链接">​</a></h3><ul><li>渲染引擎是浏览器用于将 HTML、CSS 和 JavaScript 转换为可视化页面的核心组件。</li><li>常见的渲染引擎包括 Blink（Chrome、Opera）、Gecko（Firefox）、WebKit（Safari）和 Trident（IE）。</li><li>渲染引擎的主要工作包括解析 HTML 和 CSS、构建 DOM 树和渲染布局、执行 JavaScript 和绘制页面。</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="javascript-引擎">JavaScript 引擎<a href="#javascript-引擎" class="hash-link" aria-label="JavaScript 引擎的直接链接" title="JavaScript 引擎的直接链接">​</a></h3><ul><li>JavaScript 引擎是浏览器用于解释和执行 JavaScript 代码的组件。</li><li>常见的 JavaScript 引擎包括 V8（Chrome、Node.js）、SpiderMonkey（Firefox）和 JavaScriptCore（Safari）。</li><li>JavaScript 引擎的主要工作包括解析和编译 JavaScript 代码、生成字节码和机器码、执行字节码和机器码、垃圾回收等。</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="dom-和-bom">DOM 和 BOM<a href="#dom-和-bom" class="hash-link" aria-label="DOM 和 BOM的直接链接" title="DOM 和 BOM的直接链接">​</a></h3><ul><li>DOM（文档对象模型）是浏览器用于表示和操作 HTML 和 XML 文档的 API。</li><li>BOM（浏览器对象模型）是浏览器用于表示和操作浏览器窗口和屏幕的 API。</li><li>DOM 和 BOM 是浏览器提供的两个核心对象模型。</li><li>DOM 和 BOM 的主要对象包括 window、document、location、history、navigator 等。</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="web-api">Web API<a href="#web-api" class="hash-link" aria-label="Web API的直接链接" title="Web API的直接链接">​</a></h3><ul><li>Web API 是浏览器提供的一组标准化的 JavaScript API，用于访问浏览器功能和设备硬件。</li><li>Web API 包括 DOM API、Canvas API、WebGL API、Web Audio API、Web Storage API、Web Workers API、XMLHttpRequest API 等。</li><li>Web API 可以通过 JavaScript 脚本调用，实现动态交互和数据处理。</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="跨域">跨域<a href="#跨域" class="hash-link" aria-label="跨域的直接链接" title="跨域的直接链接">​</a></h3><ul><li>跨域是指在浏览器中，一个页面的脚本试图访问另一个页面的资源时，由于安全策略的限制而失败。</li><li>常见的跨域限制包括同源策略、CORS（跨域资源共享）和 JSONP（JSON with Padding）。</li><li>同源策略是浏览器的一种安全策略，用于防止一个页面的脚本访问另一个页面的资源。</li><li>CORS 是一种跨域解决方案，允许服务器在响应中添加一些头信息，告诉浏览器允许跨域访问。</li><li>JSONP 是一种跨域解决方案，通过动态创建 script 标签，将 JSON 数据作为回调函数的参数传递。</li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_biKL" id="安全">安全<a href="#安全" class="hash-link" aria-label="安全的直接链接" title="安全的直接链接">​</a></h2><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="xss">XSS<a href="#xss" class="hash-link" aria-label="XSS的直接链接" title="XSS的直接链接">​</a></h3><ul><li>XSS（跨站脚本攻击）是一种利用 Web 应用程序漏洞，向页面注入恶意脚本的攻击。</li><li>XSS 攻击可以窃取用户的敏感信息、篡改页面内容、劫持用户会话等。</li><li>防范 XSS 攻击的方法包括输入验证、输出编码、使用 CSP（内容安全策略）等。</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="csrf">CSRF<a href="#csrf" class="hash-link" aria-label="CSRF的直接链接" title="CSRF的直接链接">​</a></h3><ul><li>CSRF（跨站请求伪造）是一种利用用户已登录的身份，在用户不知情的情况下，向 Web 应用程序发送恶意请求的攻击。</li><li>CSRF 攻击可以执行任意操作，包括修改用户信息、发起转账、删除数据等。</li><li>防范 CSRF 攻击的方法包括使用 CSRF Token、检查 Referer 头、使用 SameSite Cookie 等。</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="sql-注入">SQL 注入<a href="#sql-注入" class="hash-link" aria-label="SQL 注入的直接链接" title="SQL 注入的直接链接">​</a></h3><ul><li>SQL 注入是一种利用 Web 应用程序漏洞，向数据库发送恶意 SQL 语句的攻击。</li><li>SQL 注入攻击可以窃取用户的敏感信息、篡改数据库内容、执行任意操作等。</li><li>防范 SQL 注入攻击的方法包括使用参数化查询、输入验证、限制数据库权限等。</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="加密">加密<a href="#加密" class="hash-link" aria-label="加密的直接链接" title="加密的直接链接">​</a></h3><ul><li>加密是一种将数据转换为不可读的形式，以保护数据安全性的技术。</li><li>常见的加密算法包括对称加密算法（如 AES、DES）、非对称加密算法（如 RSA、ECC）和哈希算法（如 SHA-256、MD5）。</li><li>对称加密算法使用相同的密钥进行加密和解密，速度快但安全性较低。</li><li>非对称加密算法使用公钥和私钥进行加密和解密，安全性高但速度较慢。</li><li>哈希算法将任意长度的数据转换为固定长度的哈希值，不可逆且不可篡改。</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="https-1">HTTPS<a href="#https-1" class="hash-link" aria-label="HTTPS的直接链接" title="HTTPS的直接链接">​</a></h3><ul><li>HTTPS（安全 HTTP）是一种通过 SSL/TLS 加密的 HTTP 协议。</li><li>HTTPS 使用公钥加密和私钥解密的方式保证通信的安全性。</li><li>HTTPS 使用数字证书验证服务器的身份。</li><li>HTTPS 的默认端口是 443。</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="csp">CSP<a href="#csp" class="hash-link" aria-label="CSP的直接链接" title="CSP的直接链接">​</a></h3><ul><li>CSP（内容安全策略）是一种通过限制页面中可执行的脚本和资源，防范 XSS 和其他攻击的安全策略。</li><li>CSP 可以通过 HTTP 头或 meta 标签设置。</li><li>CSP 可以限制页面中可执行的脚本、样式、图片、字体等资源。</li><li>CSP 可以限制页面中可加载的来源，包括域名、协议、端口等。</li></ul><p>希望这份知识点总结能够帮助你更好地了解前端关于网络、浏览器和安全的知识！</p><h1>web 基础知识 HTML, CSS, JavaScript, and TypeScript</h1><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="看这里-1"><a href="/docs/category/基础">看这里</a><a href="#看这里-1" class="hash-link" aria-label="看这里-1的直接链接" title="看这里-1的直接链接">​</a></h3><h2 class="anchor anchorWithHideOnScrollNavbar_biKL" id="javascript-复习指南">javascript 复习指南<a href="#javascript-复习指南" class="hash-link" aria-label="javascript 复习指南的直接链接" title="javascript 复习指南的直接链接">​</a></h2><p>以下是一份全面的 JavaScript 复习指南：</p><ul><li><p>1、基础知识</p><ul><li>JavaScript 是一种脚本语言，用于在网页上添加交互性。</li><li>JavaScript 可以在浏览器中运行，也可以在服务器端运行。</li><li>JavaScript 是一种弱类型语言，变量不需要声明类型。</li><li>JavaScript 中的变量可以是全局的或局部的。</li><li>JavaScript 中的函数可以是匿名的。</li><li>JavaScript 中的对象是动态的，可以随时添加或删除属性。</li></ul></li><li><p>2、 数据类型</p><ul><li>JavaScript 中有 7 种数据类型：字符串、数字、布尔值、null、undefined、对象和符号。</li><li>字符串是一系列字符，可以使用单引号或双引号表示。</li><li>数字可以是整数或浮点数。</li><li>布尔值只有两个值：true 和 false。</li><li>null 表示一个空对象。</li><li>undefined 表示一个未定义的值。</li><li>对象是一种复合数据类型，可以包含多个属性和方法。</li><li>符号是 ECMAScript 6 中新增的数据类型，用于创建唯一的标识符。</li></ul></li><li><p>3、 运算符</p><ul><li>JavaScript 中有多种运算符，包括算术运算符、比较运算符、逻辑运算符和位运算符。</li><li>算术运算符用于执行基本的数学运算。</li><li>比较运算符用于比较两个值。</li><li>逻辑运算符用于组合条件语句。</li><li>位运算符用于对数字的二进制表示进行操作。</li></ul></li><li><p>4、 控制流</p><ul><li>JavaScript 中有多种控制流语句，包括 if 语句、switch 语句、for 循环、while 循环和 do-while 循环。</li><li>if 语句用于根据条件执行不同的代码块。</li><li>switch 语句用于根据不同的条件执行不同的代码块。</li><li>for 循环用于重复执行代码块。</li><li>while 循环用于在条件为真时重复执行代码块。</li><li>do-while 循环与 while 循环类似，但它会先执行一次代码块，然后再检查条件。</li></ul></li><li><p>5、 函数</p><ul><li>JavaScript 中的函数是一种可重复使用的代码块。</li><li>函数可以接受参数，并返回一个值。</li><li>函数可以是匿名的。</li><li>函数可以作为变量传递。</li><li>函数可以作为对象的方法调用。</li></ul></li><li><p>6、 对象</p><ul><li>JavaScript 中的对象是一种复合数据类型，可以包含多个属性和方法。</li><li>对象可以通过字面量或构造函数创建。</li><li>对象的属性可以是字符串或符号。</li><li>对象的方法是一种函数，可以通过对象调用。</li><li>对象可以继承另一个对象的属性和方法。</li></ul></li><li><p>7、 数组</p><ul><li>JavaScript 中的数组是一种特殊的对象，用于存储多个值。</li><li>数组可以通过字面量或构造函数创建。</li><li>数组的元素可以是任何数据类型，包括其他数组。</li><li>数组的元素可以通过索引访问。</li><li>数组有多种方法，包括 push、pop、shift、unshift、slice、splice 等。</li></ul></li><li><p>8、 DOM</p><ul><li>DOM（文档对象模型）是一种用于访问 HTML 和 XML 文档的 API。</li><li>DOM 将文档表示为一个树形结构，每个节点都是一个对象。</li><li>JavaScript 可以使用 DOM API 操作文档，包括创建、修改和删除元素、属性和文本。</li><li>JavaScript 可以使用事件处理程序响应用户交互，包括点击、鼠标移动、键盘输入等。</li></ul></li><li><p>9、 AJAX</p><ul><li>AJAX（异步 JavaScript 和 XML）是一种用于在不重新加载整个页面的情况下更新部分页面的技术。</li><li>AJAX 使用 XMLHttpRequest 对象与服务器进行通信。</li><li>JavaScript 可以使用 AJAX 技术获取和发送数据，包括 JSON 和 XML 格式的数据。</li></ul></li><li><p>10、 ES6</p><ul><li>ES6（ECMAScript 6）是 JavaScript 的一个版本，也称为 ECMAScript 2015。</li><li>ES6 引入了许多新的语言特性，包括 let 和 const 关键字、箭头函数、模板字符串、解构赋值、默认参数、展开运算符、类和模块等。</li><li>ES6 的语言特性可以通过 Babel 等工具转换为 ES5 代码，以便在旧版浏览器中运行。</li></ul></li></ul><p>希望这份指南能够帮助你复习 JavaScript！</p><h2 class="anchor anchorWithHideOnScrollNavbar_biKL" id="git-github-or-gitlab">Git, github or gitlab<a href="#git-github-or-gitlab" class="hash-link" aria-label="Git, github or gitlab的直接链接" title="Git, github or gitlab的直接链接">​</a></h2><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="git-常用命令可以-看这里">Git 常用命令可以 <a href="/docs/base/git">看这里</a><a href="#git-常用命令可以-看这里" class="hash-link" aria-label="git-常用命令可以-看这里的直接链接" title="git-常用命令可以-看这里的直接链接">​</a></h3><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="github-这里">Github <a href="https://github.com/" target="_blank" rel="noopener noreferrer">这里</a><a href="#github-这里" class="hash-link" aria-label="github-这里的直接链接" title="github-这里的直接链接">​</a></h3><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="gitlab-这里">Gitlab <a href="https://gitlab.com" target="_blank" rel="noopener noreferrer">这里</a><a href="#gitlab-这里" class="hash-link" aria-label="gitlab-这里的直接链接" title="gitlab-这里的直接链接">​</a></h3><h2 class="anchor anchorWithHideOnScrollNavbar_biKL" id="前端框架">前端框架<a href="#前端框架" class="hash-link" aria-label="前端框架的直接链接" title="前端框架的直接链接">​</a></h2><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="看这里-2"><a href="/docs/category/框架">看这里</a><a href="#看这里-2" class="hash-link" aria-label="看这里-2的直接链接" title="看这里-2的直接链接">​</a></h3><h2 class="anchor anchorWithHideOnScrollNavbar_biKL" id="后端开发-nodejs">后端开发 Nodejs<a href="#后端开发-nodejs" class="hash-link" aria-label="后端开发 Nodejs的直接链接" title="后端开发 Nodejs的直接链接">​</a></h2><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="看这里-3"><a href="/docs/category/nodejs">看这里</a><a href="#看这里-3" class="hash-link" aria-label="看这里-3的直接链接" title="看这里-3的直接链接">​</a></h3><h2 class="anchor anchorWithHideOnScrollNavbar_biKL" id="数据库">数据库<a href="#数据库" class="hash-link" aria-label="数据库的直接链接" title="数据库的直接链接">​</a></h2><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="看这里-4"><a href="/docs/category/数据库">看这里</a><a href="#看这里-4" class="hash-link" aria-label="看这里-4的直接链接" title="看这里-4的直接链接">​</a></h3><h2 class="anchor anchorWithHideOnScrollNavbar_biKL" id="总结">总结<a href="#总结" class="hash-link" aria-label="总结的直接链接" title="总结的直接链接">​</a></h2><p>作为一名正在通往全栈工程师的路上，还是提醒大家，做好本职工作，人的精力毕竟有限，不可能面面俱到，首先你必须有一项是精通的，比如我前端比较精通，那就先把前端做到可以游刃有余，之后再考虑后端的学习。当然，前端后端都会有些通用技能，比如像算法，数据结构，git，网络，安全等等。上面介绍的每一项技能都可以在我的总结中看到，只不过有的内容还没有整理出来，后期都会不断的完善，也给大家提供一个可以学习的地方。</p>]]></content>
        <author>
            <name>Torres Li</name>
            <uri>https://github.com/JamesLi-dev</uri>
        </author>
        <category label="前端" term="前端"/>
        <category label="全栈" term="全栈"/>
        <category label="HTML" term="HTML"/>
        <category label="CSS" term="CSS"/>
        <category label="JS" term="JS"/>
        <category label="React" term="React"/>
        <category label="Node.js" term="Node.js"/>
        <category label="Mysql" term="Mysql"/>
        <category label="MongoDB" term="MongoDB"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端面试准备计划，直面寒冬！]]></title>
        <id>https://JamesLi-dev.github.io/blog/2023/03/15/blog</id>
        <link href="https://JamesLi-dev.github.io/blog/2023/03/15/blog"/>
        <updated>2023-03-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[为了更好的直面寒冬，应对现在大环境，是时候好好准备一下了。]]></summary>
        <content type="html"><![CDATA[<p>为了更好的直面寒冬，应对现在大环境，是时候好好准备一下了。</p><h2 class="anchor anchorWithHideOnScrollNavbar_biKL" id="一简历">一、简历<a href="#一简历" class="hash-link" aria-label="一、简历的直接链接" title="一、简历的直接链接">​</a></h2><p>找工作，那肯定不能少了简历，敲门砖嘛！一份好的简历可以让你轻松通过初筛，拿到面试的机会</p><p>总结几点</p><ul><li>简历内容简洁明了，简历模板不需要太花哨</li><li>内容块要有明确（个人信息，工作经历，项目经历，专业技能，社区blog等模块）<ul><li>最重要的应该是表现出自己的优势在哪里，比如在项目中，做了哪些难点工作，工作职责内容等</li><li>个人在项目中的参与度，是什么角色</li><li>个人基本信息</li><li>加分项 github（要有内容） blog 网站 有自己的东西</li></ul></li><li>专业技能，写那么4-5点就OK，太基础的就不需要写了，两个关键词 『精通』『熟练』要区分</li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_biKL" id="二技术准备">二、技术准备<a href="#二技术准备" class="hash-link" aria-label="二、技术准备的直接链接" title="二、技术准备的直接链接">​</a></h2><p>众所周知，国内面试都会经常问一些八股文，算法等等这类的东西，虽然很反感，但是不得不做准备，这里就突然想起一次特别的面试方式，给面试人一个需求（在github上），要求面试人5天之内完成这个需求，提交到github上，当然这种面试是在面试完基础知识点之后的第二面或者三面的内容，你觉得这类的面试方式你可以接受吗？</p><p>扯远了，言归正传，下面我只列出大纲内容</p><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="htmlcss">HTML，CSS<a href="#htmlcss" class="hash-link" aria-label="HTML，CSS的直接链接" title="HTML，CSS的直接链接">​</a></h3><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="1从浏览器导航栏输入地址到页面渲染完成的过程">1、从浏览器导航栏输入地址到页面渲染完成的过程<a href="#1从浏览器导航栏输入地址到页面渲染完成的过程" class="hash-link" aria-label="1、从浏览器导航栏输入地址到页面渲染完成的过程的直接链接" title="1、从浏览器导航栏输入地址到页面渲染完成的过程的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="2语义化标签">2、语义化标签<a href="#2语义化标签" class="hash-link" aria-label="2、语义化标签的直接链接" title="2、语义化标签的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="3我的js-基础中可以查看">3、<a href="https://jamesli-dev.github.io/docs/base/js/jsBasic" target="_blank" rel="noopener noreferrer" title="我的js 基础中可以查看">script 标签的 <code>defer</code> 和 <code>async</code></a><a href="#3我的js-基础中可以查看" class="hash-link" aria-label="3我的js-基础中可以查看的直接链接" title="3我的js-基础中可以查看的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="4script标签defer-和-async-什么区别">4、script标签，defer 和 async 什么区别？<a href="#4script标签defer-和-async-什么区别" class="hash-link" aria-label="4、script标签，defer 和 async 什么区别？的直接链接" title="4、script标签，defer 和 async 什么区别？的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="5重排reflow和重绘repaint的理解">5、重排（reflow）和重绘（repaint）的理解<a href="#5重排reflow和重绘repaint的理解" class="hash-link" aria-label="5、重排（reflow）和重绘（repaint）的理解的直接链接" title="5、重排（reflow）和重绘（repaint）的理解的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="6flex-布局">6、flex 布局<a href="#6flex-布局" class="hash-link" aria-label="6、flex 布局的直接链接" title="6、flex 布局的直接链接">​</a></h4><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="js-基础">JS 基础<a href="#js-基础" class="hash-link" aria-label="JS 基础的直接链接" title="JS 基础的直接链接">​</a></h3><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="1event-loop-事件循环">1、event loop 事件循环<a href="#1event-loop-事件循环" class="hash-link" aria-label="1、event loop 事件循环的直接链接" title="1、event loop 事件循环的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="2this指向有哪几种">2、this指向有哪几种？<a href="#2this指向有哪几种" class="hash-link" aria-label="2、this指向有哪几种？的直接链接" title="2、this指向有哪几种？的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="3原型和原型链">3、原型和原型链<a href="#3原型和原型链" class="hash-link" aria-label="3、原型和原型链的直接链接" title="3、原型和原型链的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="4作用域作用域链">4、作用域，作用域链<a href="#4作用域作用域链" class="hash-link" aria-label="4、作用域，作用域链的直接链接" title="4、作用域，作用域链的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="5执行上下文">5、执行上下文<a href="#5执行上下文" class="hash-link" aria-label="5、执行上下文的直接链接" title="5、执行上下文的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="6闭包">6、闭包<a href="#6闭包" class="hash-link" aria-label="6、闭包的直接链接" title="6、闭包的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="7内存泄露">7、内存泄露<a href="#7内存泄露" class="hash-link" aria-label="7、内存泄露的直接链接" title="7、内存泄露的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="8es6-新特性">8、ES6 新特性<a href="#8es6-新特性" class="hash-link" aria-label="8、ES6 新特性的直接链接" title="8、ES6 新特性的直接链接">​</a></h4><ul><li>箭头函数、模板字符串、模板字符串、解构赋值、延展操作符、对象属性简写、Let与Const</li><li>对象方法、数组方法、Set 和 Map</li><li>Promise、async/await、generator</li><li>ES6 Modules<h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="9call-applybind-使用区别实现">9、call， apply，bind （使用，区别，实现）<a href="#9call-applybind-使用区别实现" class="hash-link" aria-label="9、call， apply，bind （使用，区别，实现）的直接链接" title="9、call， apply，bind （使用，区别，实现）的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="10new-操作符过程">10、new 操作符（过程）<a href="#10new-操作符过程" class="hash-link" aria-label="10、new 操作符（过程）的直接链接" title="10、new 操作符（过程）的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="11数据类型怎么判断-typeof">11、数据类型（怎么判断 typeof...）<a href="#11数据类型怎么判断-typeof" class="hash-link" aria-label="11、数据类型（怎么判断 typeof...）的直接链接" title="11、数据类型（怎么判断 typeof...）的直接链接">​</a></h4></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="ts">TS<a href="#ts" class="hash-link" aria-label="TS的直接链接" title="TS的直接链接">​</a></h3><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="1ts-泛型">1、<a href="https://jamesli-dev.github.io/docs/base/TS/tsGenerics," target="_blank" rel="noopener noreferrer" title="TS 泛型">泛型</a><a href="#1ts-泛型" class="hash-link" aria-label="1ts-泛型的直接链接" title="1ts-泛型的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="2我的ts-基础">2、<a href="https://jamesli-dev.github.io/docs/base/TS/tsBase," target="_blank" rel="noopener noreferrer" title="我的TS 基础">TS 中有哪些类型</a><a href="#2我的ts-基础" class="hash-link" aria-label="2我的ts-基础的直接链接" title="2我的ts-基础的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="3ts-和-js-相比有哪些优势">3、TS 和 JS 相比有哪些优势<a href="#3ts-和-js-相比有哪些优势" class="hash-link" aria-label="3、TS 和 JS 相比有哪些优势的直接链接" title="3、TS 和 JS 相比有哪些优势的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="4void-和-never-区别">4、void 和 never 区别<a href="#4void-和-never-区别" class="hash-link" aria-label="4、void 和 never 区别的直接链接" title="4、void 和 never 区别的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="5any-和-unknow-的区别">5、any 和 unknow 的区别<a href="#5any-和-unknow-的区别" class="hash-link" aria-label="5、any 和 unknow 的区别的直接链接" title="5、any 和 unknow 的区别的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="6类型推断">6、类型推断<a href="#6类型推断" class="hash-link" aria-label="6、类型推断的直接链接" title="6、类型推断的直接链接">​</a></h4><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="react">React<a href="#react" class="hash-link" aria-label="React的直接链接" title="React的直接链接">​</a></h3><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="1fiber---diff算法---虚拟dom---事件系统">1、fiber -&gt; diff算法 -&gt; 虚拟Dom -&gt; 事件系统<a href="#1fiber---diff算法---虚拟dom---事件系统" class="hash-link" aria-label="1、fiber -> diff算法 -> 虚拟Dom -> 事件系统的直接链接" title="1、fiber -> diff算法 -> 虚拟Dom -> 事件系统的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="2react-中key的作用">2、react 中key的作用<a href="#2react-中key的作用" class="hash-link" aria-label="2、react 中key的作用的直接链接" title="2、react 中key的作用的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="3生命周期---hooks-出现解决了什么以及他们之间的区别">3、生命周期 -&gt; hooks 出现解决了什么，以及他们之间的区别<a href="#3生命周期---hooks-出现解决了什么以及他们之间的区别" class="hash-link" aria-label="3、生命周期 -> hooks 出现解决了什么，以及他们之间的区别的直接链接" title="3、生命周期 -> hooks 出现解决了什么，以及他们之间的区别的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="4常用hooks的作用经常怎么使用">4、常用hooks的作用，经常怎么使用<a href="#4常用hooks的作用经常怎么使用" class="hash-link" aria-label="4、常用hooks的作用，经常怎么使用的直接链接" title="4、常用hooks的作用，经常怎么使用的直接链接">​</a></h4><ul><li>useState, useEffect, useRef, useLayoutEffect</li><li>useMemo, useCallback</li><li>useContext, </li></ul><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="5类组件---函数组件-区别">5、类组件 -&gt; 函数组件 区别<a href="#5类组件---函数组件-区别" class="hash-link" aria-label="5、类组件 -> 函数组件 区别的直接链接" title="5、类组件 -> 函数组件 区别的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="6context">6、context<a href="#6context" class="hash-link" aria-label="6、context的直接链接" title="6、context的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="7redux-等状态管理原理执行过程">7、redux 等状态管理原理，执行过程<a href="#7redux-等状态管理原理执行过程" class="hash-link" aria-label="7、redux 等状态管理原理，执行过程的直接链接" title="7、redux 等状态管理原理，执行过程的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="8性能优化memo-usememo-lazy-suspense-fragment等等">8、性能优化（memo, useMemo, lazy, Suspense, Fragment等等）<a href="#8性能优化memo-usememo-lazy-suspense-fragment等等" class="hash-link" aria-label="8、性能优化（memo, useMemo, lazy, Suspense, Fragment等等）的直接链接" title="8、性能优化（memo, useMemo, lazy, Suspense, Fragment等等）的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="9自定义hooks">9、自定义hooks<a href="#9自定义hooks" class="hash-link" aria-label="9、自定义hooks的直接链接" title="9、自定义hooks的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="10错误边界报警系统捕获错误等-如果做过前端监控">10、错误边界，报警系统，捕获错误等 (如果做过前端监控)<a href="#10错误边界报警系统捕获错误等-如果做过前端监控" class="hash-link" aria-label="10、错误边界，报警系统，捕获错误等 (如果做过前端监控)的直接链接" title="10、错误边界，报警系统，捕获错误等 (如果做过前端监控)的直接链接">​</a></h4><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="webpack">webpack<a href="#webpack" class="hash-link" aria-label="webpack的直接链接" title="webpack的直接链接">​</a></h3><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="1打包流程">1、打包流程<a href="#1打包流程" class="hash-link" aria-label="1、打包流程的直接链接" title="1、打包流程的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="2loader-plugin-用来做什么有什么区别">2、loader, plugin 用来做什么，有什么区别<a href="#2loader-plugin-用来做什么有什么区别" class="hash-link" aria-label="2、loader, plugin 用来做什么，有什么区别的直接链接" title="2、loader, plugin 用来做什么，有什么区别的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="3描述怎么实现一个loader-或者plugin">3、描述怎么实现一个loader 或者plugin<a href="#3描述怎么实现一个loader-或者plugin" class="hash-link" aria-label="3、描述怎么实现一个loader 或者plugin的直接链接" title="3、描述怎么实现一个loader 或者plugin的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="4热更新-原理">4、热更新 原理<a href="#4热更新-原理" class="hash-link" aria-label="4、热更新 原理的直接链接" title="4、热更新 原理的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="5怎么优化构建速度">5、怎么优化构建速度<a href="#5怎么优化构建速度" class="hash-link" aria-label="5、怎么优化构建速度的直接链接" title="5、怎么优化构建速度的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="6文件指纹策略">6、文件指纹策略<a href="#6文件指纹策略" class="hash-link" aria-label="6、文件指纹策略的直接链接" title="6、文件指纹策略的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="7和其他打包工具比如-vite-区别">7、和其他打包工具比如 vite 区别<a href="#7和其他打包工具比如-vite-区别" class="hash-link" aria-label="7、和其他打包工具比如 vite 区别的直接链接" title="7、和其他打包工具比如 vite 区别的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="8babel原理">8、Babel（原理）<a href="#8babel原理" class="hash-link" aria-label="8、Babel（原理）的直接链接" title="8、Babel（原理）的直接链接">​</a></h4><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="工程化模块化">工程化，模块化<a href="#工程化模块化" class="hash-link" aria-label="工程化，模块化的直接链接" title="工程化，模块化的直接链接">​</a></h3><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="1-脚手架-creat-react-appvue-cli等等模板管理减少框架搭建时间">1、 脚手架 creat-react-app、vue-cli等等，模板管理，减少框架搭建时间<a href="#1-脚手架-creat-react-appvue-cli等等模板管理减少框架搭建时间" class="hash-link" aria-label="1、 脚手架 creat-react-app、vue-cli等等，模板管理，减少框架搭建时间的直接链接" title="1、 脚手架 creat-react-app、vue-cli等等，模板管理，减少框架搭建时间的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="2-代码规范-eslint--prettier--husky-构建pre-commit-预检规范">2、 代码规范 eslint + prettier + husky 构建pre-commit 预检规范<a href="#2-代码规范-eslint--prettier--husky-构建pre-commit-预检规范" class="hash-link" aria-label="2、 代码规范 eslint + prettier + husky 构建pre-commit 预检规范的直接链接" title="2、 代码规范 eslint + prettier + husky 构建pre-commit 预检规范的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="3-项目上线前的流程规范-git-分支管理开发分支develop-测试分支master-主干">3、 项目上线前的流程规范 git 分支管理，开发分支，develop 测试分支，master 主干<a href="#3-项目上线前的流程规范-git-分支管理开发分支develop-测试分支master-主干" class="hash-link" aria-label="3、 项目上线前的流程规范 git 分支管理，开发分支，develop 测试分支，master 主干的直接链接" title="3、 项目上线前的流程规范 git 分支管理，开发分支，develop 测试分支，master 主干的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="4-项目中的模块化页面组件化细化页面抽离公共组件减少单文件代码量">4、 项目中的模块化、页面组件化，细化页面，抽离公共组件，减少单文件代码量<a href="#4-项目中的模块化页面组件化细化页面抽离公共组件减少单文件代码量" class="hash-link" aria-label="4、 项目中的模块化、页面组件化，细化页面，抽离公共组件，减少单文件代码量的直接链接" title="4、 项目中的模块化、页面组件化，细化页面，抽离公共组件，减少单文件代码量的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="5-mock服务mockjs-接口拦截返回模拟数据或yapiswagger">5、 mock服务，mockjs 接口拦截，返回模拟数据，或Yapi，swagger<a href="#5-mock服务mockjs-接口拦截返回模拟数据或yapiswagger" class="hash-link" aria-label="5、 mock服务，mockjs 接口拦截，返回模拟数据，或Yapi，swagger的直接链接" title="5、 mock服务，mockjs 接口拦截，返回模拟数据，或Yapi，swagger的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="6-自动化部署-jenkins">6、 自动化部署 Jenkins<a href="#6-自动化部署-jenkins" class="hash-link" aria-label="6、 自动化部署 Jenkins的直接链接" title="6、 自动化部署 Jenkins的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="7公司级组件库">7、公司级组件库？<a href="#7公司级组件库" class="hash-link" aria-label="7、公司级组件库？的直接链接" title="7、公司级组件库？的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="8微前端single-spaqiankun">8、微前端（single-spa？、qiankun）<a href="#8微前端single-spaqiankun" class="hash-link" aria-label="8、微前端（single-spa？、qiankun）的直接链接" title="8、微前端（single-spa？、qiankun）的直接链接">​</a></h4><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="性能优化">性能优化<a href="#性能优化" class="hash-link" aria-label="性能优化的直接链接" title="性能优化的直接链接">​</a></h3><blockquote><p>随便搜索可以得到很多方案</p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="node">Node<a href="#node" class="hash-link" aria-label="Node的直接链接" title="Node的直接链接">​</a></h3><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="1事件循环和浏览器事件循环的区别">1、事件循环，和浏览器事件循环的区别<a href="#1事件循环和浏览器事件循环的区别" class="hash-link" aria-label="1、事件循环，和浏览器事件循环的区别的直接链接" title="1、事件循环，和浏览器事件循环的区别的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="2登录鉴权">2、登录，鉴权<a href="#2登录鉴权" class="hash-link" aria-label="2、登录，鉴权的直接链接" title="2、登录，鉴权的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="3中间件">3、中间件<a href="#3中间件" class="hash-link" aria-label="3、中间件的直接链接" title="3、中间件的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="4session和cookie区别及使用">4、session（和cookie区别及使用）<a href="#4session和cookie区别及使用" class="hash-link" aria-label="4、session（和cookie区别及使用）的直接链接" title="4、session（和cookie区别及使用）的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="5stream-流">5、Stream 流<a href="#5stream-流" class="hash-link" aria-label="5、Stream 流的直接链接" title="5、Stream 流的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="6npm-install-的执行过程">6、npm install 的执行过程<a href="#6npm-install-的执行过程" class="hash-link" aria-label="6、npm install 的执行过程的直接链接" title="6、npm install 的执行过程的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="7文件系统-fs">7、文件系统 fs<a href="#7文件系统-fs" class="hash-link" aria-label="7、文件系统 fs的直接链接" title="7、文件系统 fs的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="8express-和koa框架的区别">8、express 和koa框架的区别<a href="#8express-和koa框架的区别" class="hash-link" aria-label="8、express 和koa框架的区别的直接链接" title="8、express 和koa框架的区别的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="9node的优势和劣势">9、Node的优势和劣势？<a href="#9node的优势和劣势" class="hash-link" aria-label="9、Node的优势和劣势？的直接链接" title="9、Node的优势和劣势？的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="10node的原生模块使用过的">10、node的原生模块（使用过的）<a href="#10node的原生模块使用过的" class="hash-link" aria-label="10、node的原生模块（使用过的）的直接链接" title="10、node的原生模块（使用过的）的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="11大文件上传如何做分片上传断点继传">11、大文件上传如何做分片上传、断点继传?<a href="#11大文件上传如何做分片上传断点继传" class="hash-link" aria-label="11、大文件上传如何做分片上传、断点继传?的直接链接" title="11、大文件上传如何做分片上传、断点继传?的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="12微服务">12、微服务<a href="#12微服务" class="hash-link" aria-label="12、微服务的直接链接" title="12、微服务的直接链接">​</a></h4><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="网络制式">网络制式<a href="#网络制式" class="hash-link" aria-label="网络制式的直接链接" title="网络制式的直接链接">​</a></h3><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="1常见状态码">1、常见状态码<a href="#1常见状态码" class="hash-link" aria-label="1、常见状态码的直接链接" title="1、常见状态码的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="2浏览器存储缓存">2、浏览器存储、缓存<a href="#2浏览器存储缓存" class="hash-link" aria-label="2、浏览器存储、缓存的直接链接" title="2、浏览器存储、缓存的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="3跨域为什么常用解决办法">3、跨域(为什么、常用解决办法)<a href="#3跨域为什么常用解决办法" class="hash-link" aria-label="3、跨域(为什么、常用解决办法)的直接链接" title="3、跨域(为什么、常用解决办法)的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="4websoket">4、websoket<a href="#4websoket" class="hash-link" aria-label="4、websoket的直接链接" title="4、websoket的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="5httphttps">5、http，https<a href="#5httphttps" class="hash-link" aria-label="5、http，https的直接链接" title="5、http，https的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="6安全csrfxssddos">6、安全（CSRF、XSS、DDos）<a href="#6安全csrfxssddos" class="hash-link" aria-label="6、安全（CSRF、XSS、DDos）的直接链接" title="6、安全（CSRF、XSS、DDos）的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="7前端登录流程">7、前端登录流程<a href="#7前端登录流程" class="hash-link" aria-label="7、前端登录流程的直接链接" title="7、前端登录流程的直接链接">​</a></h4><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="手写题">手写题<a href="#手写题" class="hash-link" aria-label="手写题的直接链接" title="手写题的直接链接">​</a></h3><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="我的js-基础中可以查看"><a href="https://jamesli-dev.github.io/docs/base/js/jsBasic" target="_blank" rel="noopener noreferrer" title="我的js 基础中可以查看">这里都有Click</a><a href="#我的js-基础中可以查看" class="hash-link" aria-label="我的js-基础中可以查看的直接链接" title="我的js-基础中可以查看的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="1深度克隆">1、深度克隆<a href="#1深度克隆" class="hash-link" aria-label="1、深度克隆的直接链接" title="1、深度克隆的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="2防抖节流">2、防抖，节流<a href="#2防抖节流" class="hash-link" aria-label="2、防抖，节流的直接链接" title="2、防抖，节流的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="3callbindapply">3、call，bind，apply<a href="#3callbindapply" class="hash-link" aria-label="3、call，bind，apply的直接链接" title="3、call，bind，apply的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="4promise-promiseall">4、promise, promise.all<a href="#4promise-promiseall" class="hash-link" aria-label="4、promise, promise.all的直接链接" title="4、promise, promise.all的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="5函数柯里化">5、函数柯里化<a href="#5函数柯里化" class="hash-link" aria-label="5、函数柯里化的直接链接" title="5、函数柯里化的直接链接">​</a></h4><p>.......</p><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="算法">算法<a href="#算法" class="hash-link" aria-label="算法的直接链接" title="算法的直接链接">​</a></h3><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="直接上链接---codetopcc">直接上链接 -&gt; <a href="https://codetop.cc/home" target="_blank" rel="noopener noreferrer" title="codeTop.cc">都在这里</a><a href="#直接上链接---codetopcc" class="hash-link" aria-label="直接上链接---codetopcc的直接链接" title="直接上链接---codetopcc的直接链接">​</a></h4><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="其他">其他<a href="#其他" class="hash-link" aria-label="其他的直接链接" title="其他的直接链接">​</a></h3><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="1前端路由实现方式">1、前端路由实现方式<a href="#1前端路由实现方式" class="hash-link" aria-label="1、前端路由实现方式的直接链接" title="1、前端路由实现方式的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="2taro-vs-uni-app-优缺点">2、Taro VS uni-app 优缺点<a href="#2taro-vs-uni-app-优缺点" class="hash-link" aria-label="2、Taro VS uni-app 优缺点的直接链接" title="2、Taro VS uni-app 优缺点的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="3谈谈微信小程序">3、谈谈微信小程序<a href="#3谈谈微信小程序" class="hash-link" aria-label="3、谈谈微信小程序的直接链接" title="3、谈谈微信小程序的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="4代码发布之后怎么确保用户访问到的是最新的">4、代码发布之后，怎么确保用户访问到的是最新的<a href="#4代码发布之后怎么确保用户访问到的是最新的" class="hash-link" aria-label="4、代码发布之后，怎么确保用户访问到的是最新的的直接链接" title="4、代码发布之后，怎么确保用户访问到的是最新的的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="5前端常用设计模式观察者模式发布订阅模式等">5、前端常用设计模式（观察者模式，发布订阅模式等）<a href="#5前端常用设计模式观察者模式发布订阅模式等" class="hash-link" aria-label="5、前端常用设计模式（观察者模式，发布订阅模式等）的直接链接" title="5、前端常用设计模式（观察者模式，发布订阅模式等）的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="6谈谈微前端">6、谈谈微前端<a href="#6谈谈微前端" class="hash-link" aria-label="6、谈谈微前端的直接链接" title="6、谈谈微前端的直接链接">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_biKL" id="7结合你的项目经历谈谈有哪些难点解决方式">7、结合你的项目经历，谈谈有哪些难点，解决方式<a href="#7结合你的项目经历谈谈有哪些难点解决方式" class="hash-link" aria-label="7、结合你的项目经历，谈谈有哪些难点，解决方式的直接链接" title="7、结合你的项目经历，谈谈有哪些难点，解决方式的直接链接">​</a></h4><h2 class="anchor anchorWithHideOnScrollNavbar_biKL" id="三心态">三、心态<a href="#三心态" class="hash-link" aria-label="三、心态的直接链接" title="三、心态的直接链接">​</a></h2><p>生活总归不是一帆风顺，尽力而为，随心而动，保持本心</p><p>不管是找工作，还是在面试过程中，心态是很重要的，尤其是在当下市场环境不理想的情况下，更要求我们放平心态，烦躁不安是正常，但是得及时调节自我，不能太着急，着急可能就会犯一些意想不到的错误，亲身经历过的应该懂。</p><h2 class="anchor anchorWithHideOnScrollNavbar_biKL" id="四总结">四、总结<a href="#四总结" class="hash-link" aria-label="四、总结的直接链接" title="四、总结的直接链接">​</a></h2><p>时间关系，上文中只列出了一些框架，这些东西随便搜索，都是可以得到答案，我后面也会抽时间整理一份详细的内容出来。
不多废话，希望所有的人都能找到理想合适自己的工作！</p>]]></content>
        <author>
            <name>Torres Li</name>
            <uri>https://github.com/JamesLi-dev</uri>
        </author>
        <category label="前端" term="前端"/>
        <category label="面试" term="面试"/>
        <category label="HTML" term="HTML"/>
        <category label="CSS" term="CSS"/>
        <category label="JS" term="JS"/>
        <category label="React" term="React"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2023二月被裁，一名六年前端的心路历程]]></title>
        <id>https://JamesLi-dev.github.io/blog/cutstaff</id>
        <link href="https://JamesLi-dev.github.io/blog/cutstaff"/>
        <updated>2023-03-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[2023年2月的某一天，冷清的工作群里，发来了一条这样的信息：]]></summary>
        <content type="html"><![CDATA[<p>2023年2月的某一天，冷清的工作群里，发来了一条这样的信息：</p><p>【因为公司经营XXX，现决定告知上海办公室所有员工，公司员工与公司之间的劳动合同及劳动关系于2023年2月xx日依法终止。。。。。。。。。】</p><p>虽然是意料之中的事情，但是还是心里多少有点不安，在当下大环境不好的情况下，这就是一道晴天霹雳！裁员的过程就不多赘述了，过程跌宕起伏（被恶心坏了），结果意料之中吧，拿了 N + 1 主要入职时间很短，没有什么可纠结的点。</p><p>介绍一下自己，一名工作六年的前端开发，没想到在掘金的第一篇文章竟然不是技术类文章，毕竟工作这么久，还是第一次被裁员，值得记录。</p><h2 class="anchor anchorWithHideOnScrollNavbar_biKL" id="入职">入职<a href="#入职" class="hash-link" aria-label="入职的直接链接" title="入职的直接链接">​</a></h2><p>去年九月从上家公司离职，进入到这家公司，虽然是创业型公司，但是产品前景还是挺有看点，这也是我选择这家公司的原因，入职五个多月，时间是真的短！</p><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="入职之后做了什么">入职之后做了什么？<a href="#入职之后做了什么" class="hash-link" aria-label="入职之后做了什么？的直接链接" title="入职之后做了什么？的直接链接">​</a></h3><p>那可就做的多了，优化，重构，新功能，踩坑，建议等等等等，上线发版记录可以证明，刚入职一周每天都会有上线，天知道我是怎么肝出来的。</p><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="入职创业型公司的感受">入职创业型公司的感受？<a href="#入职创业型公司的感受" class="hash-link" aria-label="入职创业型公司的感受？的直接链接" title="入职创业型公司的感受？的直接链接">​</a></h3><p>虽然是属于创业性质的公司，但是刚入职时候，感觉还挺不错的，内部沟通效率很高，前后端沟通很直接，每天技术部门会有早会，安排日常工作，总结前一天的开发任务及进度，另外就是疫情时候的3+2，两天居家办公还是很舒服的，加班嘛，那就属于洒洒水啦，发版频率高，加班频率也不少，虽然大概率没有到很晚大概七八点钟吧，严重一点时候可能会到11-12点。</p><h2 class="anchor anchorWithHideOnScrollNavbar_biKL" id="离职之后">离职之后<a href="#离职之后" class="hash-link" aria-label="离职之后的直接链接" title="离职之后的直接链接">​</a></h2><p>从拿到补偿金的那一秒，整个人放空了，第一想法就是出去玩几天。</p><p>第二天，一样的闹铃，一样的时间，起床洗漱吃早饭，背包出门那一刻突然想起来，自己被裁了，不用去公司了，扔下书包跑到电脑旁，开机 -&gt; EA -&gt; FIFA ...</p><p>就这样潇洒的过了几天之后，感觉没意思了，是时候开始看看新的机会了，也就是在这时候我感觉到了一丝丝的焦虑。</p><p>打开boss，修改了简历，连续点了四五家公司沟通，只是单纯的发起兴趣，等了一会儿，一条已读，两条已读，但是没有回复，mmp 这个场景有点似曾相识啊！</p><p>这样的重复操作我屡试不爽，我知道事情没那么简单了，于是我开始反思，开始找朋友了解情况。最终得到的结论就是“不妙，不好”</p><h2 class="anchor anchorWithHideOnScrollNavbar_biKL" id="冷静思考">冷静思考<a href="#冷静思考" class="hash-link" aria-label="冷静思考的直接链接" title="冷静思考的直接链接">​</a></h2><p>看到了外面的水深火热，我开始思考，后面的路应该怎么走，是继续往下走，还是直接转行算了，再看看自己的钱包。</p><p>看到脉脉上著名的【前端已死】，各种论坛里的各种负面消息，我就在想，前端真的没路走了？</p><p>不会的，有的人觉得现在前端技术已经到顶了，其实不然，从近几年新出现的框架<code>Solid</code>，新出现的JS 运行时<code>Bun</code>, 新出现的打包工具 <code>vite</code>、<code>Turbopack</code>等等一系列的生态，全是在向好的方向发展，这并不意味着前端已死，而是需要前端从业者不断去学习和适应，不断接纳新的知识点，这个我相信后端的发展也是这么走过来的。
总之，前端还是在不断发展中，大环境的影响还是很大的，就像APP，网站等一样需要的是不断去更新，迭代！</p><h2 class="anchor anchorWithHideOnScrollNavbar_biKL" id="总结">总结<a href="#总结" class="hash-link" aria-label="总结的直接链接" title="总结的直接链接">​</a></h2><p>在不好的大环境下，在竞争激烈的当下，坚持本心才是最重要的，想想自己需要什么，想做到什么，实现什么。</p><p>扯了半天，不知道对大家来说有什么启发，到此为止！</p><p>我也该去复习知识点，准备一下八股文，算法，迎接接下来的面试了！后面我也会及时更新最近面试公司及面试题目，供大家参考。</p>]]></content>
        <author>
            <name>Torres Li</name>
            <uri>https://github.com/JamesLi-dev</uri>
        </author>
        <category label="前端" term="前端"/>
        <category label="裁员" term="裁员"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端敏感数据加密方案]]></title>
        <id>https://JamesLi-dev.github.io/blog/data safe</id>
        <link href="https://JamesLi-dev.github.io/blog/data safe"/>
        <updated>2022-09-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[前言]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithHideOnScrollNavbar_biKL" id="前言">前言<a href="#前言" class="hash-link" aria-label="前言的直接链接" title="前言的直接链接">​</a></h2><p>作为一名前端开发工程师，最近在做一款应用，涉及到了前端的数据加密需要研究下。</p><h2 class="anchor anchorWithHideOnScrollNavbar_biKL" id="数据泄露">数据泄露<a href="#数据泄露" class="hash-link" aria-label="数据泄露的直接链接" title="数据泄露的直接链接">​</a></h2><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="插件">插件<a href="#插件" class="hash-link" aria-label="插件的直接链接" title="插件的直接链接">​</a></h3><p>现在有很多的插件，类似于 google 插件这种，可以捕获到前端发送的请求数据，所以如果涉及到了用户信息的，还是得对数据进行特殊处理。</p><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="中间人攻击">中间人攻击<a href="#中间人攻击" class="hash-link" aria-label="中间人攻击的直接链接" title="中间人攻击的直接链接">​</a></h3><p>中间人攻击是常见的攻击方式。过程就是 中间人通过 DNS 欺骗等手段劫持了客户端与服务端的会话。客户端、服务端之间的信息都会经过中间人，中间人可以获取和转发两者的信息。在 HTTP 下，前端数据加密还是避免不了数据泄露，因为中间人可以伪造密钥。为了避免中间人攻击，一般采用 HTTPS 的形式传输。</p><h2 class="anchor anchorWithHideOnScrollNavbar_biKL" id="加密算法">加密算法<a href="#加密算法" class="hash-link" aria-label="加密算法的直接链接" title="加密算法的直接链接">​</a></h2><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="对称加密">对称加密<a href="#对称加密" class="hash-link" aria-label="对称加密的直接链接" title="对称加密的直接链接">​</a></h3><p>也可称为共享密钥加密。意思就是在加密解密都是公用一个密钥，发送和接收双方均使用这个密钥进行数据的加密和解密。这就要求在加密解密前必须知道密钥，对前端来说，势必需要从后端获取密钥，这样也不是太安全。</p><p>对称加密常用的算法有：</p><ul><li>AES</li><li>3DES</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="非对称加密">非对称加密<a href="#非对称加密" class="hash-link" aria-label="非对称加密的直接链接" title="非对称加密的直接链接">​</a></h3><p>也称为公开密钥加密算法。它需要两个密钥，一个称为公开密钥，也就是常说的公钥，另外一个称为私有密钥，常叫私钥。两者是配对生成的，就像钥匙和锁的关系。</p><p>因为加密和解密使用的是两个不用的密钥，所以叫做非对称加密。</p><ul><li>优点：算法强度复杂，安全性高</li><li>缺点：没有对称算法快</li></ul><p>常见的算法主要有：</p><ul><li>RSA</li><li>Elgamal</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="散列算法">散列算法<a href="#散列算法" class="hash-link" aria-label="散列算法的直接链接" title="散列算法的直接链接">​</a></h3><p>也成为哈希函数，散列函数。是把数据压缩称为摘要，从而使数据量变小，将数据的格式固定成特定长度的值。
一般用于校验数据的完整性，下载文件就可以校验 MD5 来判断下载数据是否完整。</p><p>常见的算法主要有：</p><ul><li>MD4</li><li>MD5</li><li>SHA</li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_biKL" id="方案">方案<a href="#方案" class="hash-link" aria-label="方案的直接链接" title="方案的直接链接">​</a></h2><p>上面介绍了常见的加密解密算法，下面就需要选择使用哪一种了。</p><ol><li>上面也提到了，对称加密由于需要后端返回密钥，反而降低了安全系数，所以是行不通的。</li><li>非对称加密，前端用公钥加密，服务端用私钥解密，看起来没什么问题，但是如果到客户端接收数据时，需要服务端用公钥加密，然后客户端用私钥解密。这样的话，不管是客户端还是服务端，都需要生成自己的公钥私钥。</li><li>两者结合，第一点中提到了，需要后端返回密钥。</li></ol><ul><li>客户端生成一个对称加密的 密钥 ①</li><li>传输内容通过 密钥 ① 进行对称加密传输给服务端</li><li>同时要把 密钥 ① 利用公钥进行非对称加密给到服务端</li><li>服务端通过 私钥 把对称加密的 密钥 ① 解密出来，然后用过改密钥 ① 解密出内容
上面是服务端接收，如果是客户算接收的话，就是</li><li>响应数据跟对称加密的 密钥 ① 进行加密</li><li>然后客户端接收到密文，通过客户端的 密钥 ① 进行解密</li></ul><p><img loading="lazy" src="/assets/images/safe1-543656caedfea4374e987c0ce2871ab1.png" width="1036" height="574" class="img_yecy"></p><ol start="4"><li>上面三种方案，第二种最简单，但是需要维护两套公钥私钥，公钥变化，就必须通知对方有变化，不够灵活。方案三应该最理想，密钥 ① 更加灵活，而且只需要在客户端维护，也不需要通知服务端，而且如果数据量很大，对称加密又要比非对称快速。</li></ol><p>所以最终选用方案三 来实现。</p><h2 class="anchor anchorWithHideOnScrollNavbar_biKL" id="实现">实现<a href="#实现" class="hash-link" aria-label="实现的直接链接" title="实现的直接链接">​</a></h2><p>实现的话，我们选用 AES 对称加密，RSA 非对称加密，</p><p>利用 <a href="https://github.com/brix/crypto-js" target="_blank" rel="noopener noreferrer">crypto-js</a> 来进行 AES 加密
利用 <a href="https://github.com/travist/jsencrypt" target="_blank" rel="noopener noreferrer">JSEncrypt</a> RSA 加密</p><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="rsa-生成密钥">RSA 生成密钥<a href="#rsa-生成密钥" class="hash-link" aria-label="RSA 生成密钥的直接链接" title="RSA 生成密钥的直接链接">​</a></h3><div class="language-javascript codeBlockContainer_qKi4 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_eGfQ"><pre tabindex="0" class="prism-code language-javascript codeBlock_Id3g thin-scrollbar"><code class="codeBlockLines_UQKu"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">JSEncrypt</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"jsencrypt"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 初始化</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> keyPair </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">JSEncrypt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">genKeyPair</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> genKeyPair </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  genKeyPair</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">privateKey</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> rsaUtil</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">keyPair</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">getPrivateKey</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 生成RSA密钥</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  genKeyPair</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">publicKey</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> rsaUtil</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">keyPair</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">getPublicKey</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 生成RSA公钥</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> genKeyPair</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup_FwZQ"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_zn7T" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Puu5"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_K6gp"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="rsa-公钥加密">RSA 公钥加密<a href="#rsa-公钥加密" class="hash-link" aria-label="RSA 公钥加密的直接链接" title="RSA 公钥加密的直接链接">​</a></h3><div class="language-javascript codeBlockContainer_qKi4 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_eGfQ"><pre tabindex="0" class="prism-code language-javascript codeBlock_Id3g thin-scrollbar"><code class="codeBlockLines_UQKu"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * rsa公钥加密</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param {*} content 需要加密内容</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param {*} publicKey 服务端的公钥</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @returns</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">encryptByRsa</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">content</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> publicKey</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> newValue </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> content </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'string'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> content </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> content</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  keyPair</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">setPublicKey</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">publicKey</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> keyPair</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">encryptLong</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">newValue</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 注意：加密类型为string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><br></span></code></pre><div class="buttonGroup_FwZQ"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_zn7T" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Puu5"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_K6gp"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="rsa-私钥解密">RSA 私钥解密<a href="#rsa-私钥解密" class="hash-link" aria-label="RSA 私钥解密的直接链接" title="RSA 私钥解密的直接链接">​</a></h3><div class="language-javascript codeBlockContainer_qKi4 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_eGfQ"><pre tabindex="0" class="prism-code language-javascript codeBlock_Id3g thin-scrollbar"><code class="codeBlockLines_UQKu"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * rsa私钥解密</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param {*} content 解密的内容</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param {*} privateKey 解密私钥</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @returns</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">decryptByRsa</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">content</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> privateKey</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  keyPair</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">setPrivateKey</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">privateKey</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> keyPair</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">decryptLong</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">content</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup_FwZQ"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_zn7T" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Puu5"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_K6gp"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="aes-加密">AES 加密<a href="#aes-加密" class="hash-link" aria-label="AES 加密的直接链接" title="AES 加密的直接链接">​</a></h3><div class="language-javascript codeBlockContainer_qKi4 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_eGfQ"><pre tabindex="0" class="prism-code language-javascript codeBlock_Id3g thin-scrollbar"><code class="codeBlockLines_UQKu"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">CryptoJS</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"crypto-js"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * data 加密内容</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * key AES密钥</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">cryptoData</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">data</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> key</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> aesKey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token maybe-class-name">CryptoJS</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">enc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access maybe-class-name">Utf8</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">parse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> newValue </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> data </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"string"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> cipherContent </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token known-class-name class-name">JSON</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">stringify</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> encrypted </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token maybe-class-name">CryptoJS</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">AES</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">encrypt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">CryptoJS</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">enc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access maybe-class-name">Utf8</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">parse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">newValue</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> aesKey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">mode</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">CryptoJS</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">mode</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">ECB</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">padding</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">CryptoJS</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">pad</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access maybe-class-name">Pkcs7</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> encrypted</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup_FwZQ"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_zn7T" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Puu5"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_K6gp"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_biKL" id="aes-解密">AES 解密<a href="#aes-解密" class="hash-link" aria-label="AES 解密的直接链接" title="AES 解密的直接链接">​</a></h3><div class="language-javascript codeBlockContainer_qKi4 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_eGfQ"><pre tabindex="0" class="prism-code language-javascript codeBlock_Id3g thin-scrollbar"><code class="codeBlockLines_UQKu"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">CryptoJS</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"crypto-js"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * data 解密内容 string</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * key AES密钥</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">deCryptoData</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">data</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> key</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> aesKey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token maybe-class-name">CryptoJS</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">enc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access maybe-class-name">Utf8</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">parse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> decrypt </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token maybe-class-name">CryptoJS</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">AES</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">decrypt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> aesKey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">mode</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">CryptoJS</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">mode</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">ECB</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">padding</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">CryptoJS</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">pad</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access maybe-class-name">Pkcs7</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> decString </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token maybe-class-name">CryptoJS</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">enc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access maybe-class-name">Utf8</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">stringify</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">decrypt</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> decString </span><span class="token keyword" style="color:#00009f">instanceof</span><span class="token plain"> </span><span class="token class-name">Object</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> decString </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token known-class-name class-name">JSON</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">parse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">decString</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup_FwZQ"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_zn7T" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Puu5"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_K6gp"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_biKL" id="总结">总结<a href="#总结" class="hash-link" aria-label="总结的直接链接" title="总结的直接链接">​</a></h2><p>上面的内容，主要介绍了针对当前需求，需要对信息加密及解密，保护客户的隐私数据，虽然会有一点点的性能损失，但是数据安全更重要吧，也为了给破解的人增加一些攻击难度。</p>]]></content>
        <author>
            <name>Torres Li</name>
            <uri>https://github.com/JamesLi-dev</uri>
        </author>
        <category label="安全" term="安全"/>
        <category label="数据加密" term="数据加密"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[你真的需要微服务吗？]]></title>
        <id>https://JamesLi-dev.github.io/blog/microservices</id>
        <link href="https://JamesLi-dev.github.io/blog/microservices"/>
        <updated>2020-08-26T00:00:00.000Z</updated>
        <author>
            <name>Torres Li</name>
            <uri>https://github.com/JamesLi-dev</uri>
        </author>
        <category label="Node" term="Node"/>
        <category label="微服务" term="微服务"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[欢迎来到Torli's Blog]]></title>
        <id>https://JamesLi-dev.github.io/blog/欢迎</id>
        <link href="https://JamesLi-dev.github.io/blog/欢迎"/>
        <updated>2020-08-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[欢迎来到 Torli 的 Blogs，在这里，我会分享一些自己平时的工作项目中用到的新奇、好玩的东西，还会分享一些比较新的技术的看法等等。]]></summary>
        <content type="html"><![CDATA[<p>欢迎来到 Torli 的 Blogs，在这里，我会分享一些自己平时的工作项目中用到的新奇、好玩的东西，还会分享一些比较新的技术的看法等等。</p>]]></content>
        <author>
            <name>Torres Li</name>
            <uri>https://github.com/JamesLi-dev</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[MDX Blog Post]]></title>
        <id>https://JamesLi-dev.github.io/blog/mdx-blog-post</id>
        <link href="https://JamesLi-dev.github.io/blog/mdx-blog-post"/>
        <updated>2018-08-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Blog posts support Docusaurus Markdown features, such as MDX.]]></summary>
        <content type="html"><![CDATA[<p>Blog posts support <a href="https://docusaurus.io/docs/markdown-features" target="_blank" rel="noopener noreferrer">Docusaurus Markdown features</a>, such as <a href="https://mdxjs.com/" target="_blank" rel="noopener noreferrer">MDX</a>.</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_pbkD"><div class="admonitionHeading_GpQE"><span class="admonitionIcon_QGX8"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>提示</div><div class="admonitionContent_Y2o7"><p>Use the power of React to create interactive blog posts.</p><div class="language-js codeBlockContainer_qKi4 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_eGfQ"><pre tabindex="0" class="prism-code language-js codeBlock_Id3g thin-scrollbar"><code class="codeBlockLines_UQKu"><span class="token-line" style="color:#393A34"><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">button onClick</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">alert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'button clicked!'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token maybe-class-name">Click</span><span class="token plain"> me</span><span class="token operator" style="color:#393A34">!</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">button</span><span class="token operator" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup_FwZQ"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_zn7T" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Puu5"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_K6gp"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><button>Click me!</button></div></div>]]></content>
        <author>
            <name>Torres Li</name>
            <uri>https://github.com/JamesLi-dev</uri>
        </author>
        <category label="docusaurus" term="docusaurus"/>
    </entry>
</feed>